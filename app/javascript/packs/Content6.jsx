import React from 'react';
import TweenOne from 'rc-tween-one';
import OverPack from 'rc-scroll-anim/lib/ScrollOverPack';
import { Tabs, Icon } from 'antd';

const TabPane = Tabs.TabPane;

class Content extends React.Component {

  static propTypes = {
    id: React.PropTypes.string,
    className: React.PropTypes.string,
  };

  static defaultProps = {
    className: 'content6',
  };

  state = {
    show: 0,
  };

  onChange = (key) => {
    this.setState({ show: parseInt(key) })
  }

  getBlockChildren = (item, i) => {
    const tag = item.tag;
    const img = item.img;
    const text = item.text;
    return (
      <TabPane
        key={i}
        tab={(<span
          className={`${this.props.className}-tag`}
          id={`${this.props.id}-tagBlock${i}`}
        >
          <Icon type={tag.icon} />
          {tag.tag}
        </span>)}
      >
        <TweenOne.TweenOneGroup
          enter={{ y: 30, delay: 300, opacity: 0, type: 'from', ease: 'easeOutQuad' }}
          leave={null}
          component=""
        >
          {this.state.show === i && (
            <div key="content">
              <div
                className={`${this.props.className}-img`}
                id={`${this.props.id}-imgBlock${i}`}
              >
                {img}
              </div>
              <div
                className={`${this.props.className}-text`}
                id={`${this.props.id}-textBlock${i}`}
                dangerouslySetInnerHTML={{ __html: text }}
              />
            </div>)}
        </TweenOne.TweenOneGroup>
      </TabPane>
    );
  };

  render() {
    const props = Object.assign({}, this.props);
    delete props.isMode;
    const childrenData = [
      {
        tag: { tag: 'Consumers', icon: 'desktop' },
        img: <img width="100%" src={window.dist_desktop_png} />,
        text: `<h3>Intellectual Property Protection</h3>
By distributing enclosed executables, you could prohibit the end-user from viewing or tampering with your source code.
<h3>Distribute to Non-technical Users</h3>
Free non-technical users from confusing warnings, if not errors, generated by npm or gem installers. Just deliver a clean product to them.
<h3>Merchandise Softwares</h3>
Build personal or enterprise softwares and make money out of it. Clearly mark the boundary of responsibility by compiling.`,
      },
      {
        tag: { tag: 'Developers', icon: 'code-o' },
        img: <img width="100%" src={window.dist_workstation_png} />,
        text: `<h3>Cleaner Environment</h3>
Installing a tool never pollutes a developer's global <code>node_modules</code> or system gems any more. Just use the enclosed executables.
<h3>Stay Cutting-edge</h3>
By using enclosed executables with AutoUpdate, the developer can keep using the latest tools. The executable can easily update itself in-place.
<h3>More Productive</h3>
Pre-compiling source code to byte code boosts the start-up speed of the developer tools.`,
      },
      {
        tag: { tag: 'Servers', icon: 'database' },
        img: <img width="100%" src={window.dist_server_png} />,
        text: `<h3>Quicker CI</h3>
No need to slowly build and install dependencies when running CI. Just use the enclosed executables.
<h3>Quicker Deployment</h3>
Just toss your application executable to the server and it's done.
<h3>Error-free Cluster</h3>
Give each machine the exact same copy. No more error-prone executions of N*M steps when running a M-step deployment on N machines.`,
      },
    ];
    const tabsChildren = childrenData.map(this.getBlockChildren);
    return (
      <div
        {...props}
        className={`content-template-wrapper ${props.className}-wrapper`}
      >
        <OverPack
          className={`content-template ${props.className}`}
          location={props.id}
        >
          <TweenOne
            animation={{ y: '+=30', opacity: 0, type: 'from' }}
            component="h1"
            key="h1"
            reverseDelay={200}
            id={`${props.id}-title`}
          >
            Use Cases
          </TweenOne>
          <TweenOne
            animation={{ y: '+=30', opacity: 0, type: 'from', delay: 100 }}
            component="p"
            key="p"
            reverseDelay={100}
            id={`${props.id}-content`}
          >
            Here are 3 scenarios where enclosed executables could help, among many others.
          </TweenOne>
          <TweenOne.TweenOneGroup
            key="tabs"
            enter={{ y: 30, opacity: 0, delay: 200, type: 'from' }}
            leave={{ y: 30, opacity: 0 }}
            className={`${props.className}-tabs`}
            id={`${props.id}-tabs`}
          >
            <Tabs key="tabs" onChange={this.onChange} activeKey={`${this.state.show}`}>
              {tabsChildren}
            </Tabs>
          </TweenOne.TweenOneGroup>
        </OverPack>
      </div>
    );
  }
}

export default Content;

